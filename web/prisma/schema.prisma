generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  description String?
  clerkId String @unique
  email String @unique
  imageUrl String? @default("https://www.gravatar.com/avatar/")

  roles String[]

  maps Map[]
  mapLikes MapLike[]
  mods Mod[]
  modLikes ModLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapVersion {
  id Int @id @default(autoincrement())
  map Map @relation(fields: [mapId], references: [id])
  mapId Int
  version String
  downloadUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Map {
  id Int @id @default(autoincrement())
  publishStatus PublishStatus @default(DRAFT)
  name String
  description String?
  imageUrl String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  downloads Int @default(0)

  tags String[]
  versions MapVersion[]
  likes MapLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mod {
  id Int @id @default(autoincrement())
  publishStatus PublishStatus @default(DRAFT)
  name String
  description String?
  imageUrl String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  downloads Int @default(0)

  tags String[]
  versions ModVersion[]
  likes ModLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModVersion {
  id Int @id @default(autoincrement())
  mod Mod @relation(fields: [modId], references: [id])
  modId Int
  version String
  downloadUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModLike {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  mod Mod @relation(fields: [modId], references: [id])
  modId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapLike {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  map Map @relation(fields: [mapId], references: [id])
  mapId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

