generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

enum CheckStatus {
  PENDING
  APPROVED
  DENIED
}

enum ProjectType {
  MAP
  MOD
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  fullname String
  description String?
  email String @unique
  imageUrl String? @default("/default.png")
  lastUsernameChange DateTime?

  banned Boolean @default(false)
  bannedAt DateTime?

  ips String[]

  roles String[]

  projects Project[]
  ratings Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastLogin DateTime?

  deleted Boolean @default(false)
  deletedAt DateTime?
}

model Project {
  type ProjectType
  id Int @id @default(autoincrement())
  publishStatus PublishStatus @default(DRAFT)
  name String @unique
  description String?
  imageUrl String?
  user User @relation(fields: [userId], references: [id])
  userId Int

  longDescription String?
  latestVersion String?

  versions Version[]
  ratings Rating[]
  downloads Int @default(0)
  views Int @default(0)

  averageRating Float @default(0)
  totalRatings Int @default(0)
  ratingSum Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
  deletedAt DateTime?
}

model Version {
  id Int @id @default(autoincrement())
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  version String

  downloadUrl String // points to api download endpoint
  downloadKey String? // use to generate presigne urls

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  changes String

  checkedStatus CheckStatus @default(PENDING)
  checkedMessage String?
  
  deleted Boolean @default(false)
  deletedAt DateTime?
}

model Rating {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int

  rating Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deletedAt DateTime?
}

model appConfig {
  id Int @id @default(autoincrement())

  isUserLoginEnabled Boolean @default(true)
  isUserRegistrationEnabled Boolean @default(true)
  canCreateNewProjects Boolean @default(true)
  canUpdateProjects Boolean @default(true)
  canDeleteProjects Boolean @default(true)
  canRateProjects Boolean @default(true)
  canUpdateProfile Boolean @default(true)
  canDeleteProfile Boolean @default(true)
  canSearchProjects Boolean @default(true)
  canCreateVersions Boolean @default(true)
  canDeleteVersions Boolean @default(true)
  canSetLatestVersion Boolean @default(true)
  adminOnly Boolean @default(false)
  canUploadMods Boolean @default(true)
  canUploadMaps Boolean @default(true)
  canDownload Boolean @default(true)
}